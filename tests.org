* Levels of testing
1. Acceptance: Test the whole system
2. Integration: Test our code against code we can't change (ORM Mapper, other team code)
3. Unit: Test our objects

* Continuous Integration
- Ref: https://martinfowler.com/articles/continuousIntegration.html
- Book: Continuous Delivery

* TDD
** TDD Golden Rule
- *Never write new functionnality without a FAILING TEST*
** Uncle Bob three rules of TDD
- Source: http://butunclebob.com/ArticleS.UncleBob.TheThreeRulesOfTdd
- Over the years I have come to describe Test Driven Development in terms of three simple rules. They are:
  - You are not allowed to write any production code unless it is to make a failing unit test pass.
  - You are not allowed to write any more of a unit test than is sufficient to fail; and compilation failures are failures.
  - You are not allowed to write any more production code than is sufficient to pass the one failing unit test.

* Mocks aren't Stubs
- Mocks are one special form of test objects
- Behavior verification vs State verification
- Refs: https://martinfowler.com/articles/mocksArentStubs.html
- Test Doubles
  - Dummy objects are passed around but never actually used. Usually they are just used to fill parameter lists.
  - Fake objects actually have working implementations, but usually take some shortcut which makes them not suitable for production (an in memory database is a good example).
  - Stubs provide canned answers to calls made during the test, usually not responding at all to anything outside what's programmed in for the test.
  - Spies are stubs that also record some information based on how they were called. One form of this might be an email service that records how many messages it was sent.
  - Mocks are what we are talking about here: objects pre-programmed with expectations which form a specification of the calls they are expected to receive.
